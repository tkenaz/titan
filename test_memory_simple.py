#!/usr/bin/env python3
"""Quick test for Memory Service with pgvector fixes."""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Disable OpenTelemetry
os.environ['OTEL_SDK_DISABLED'] = 'true'
os.environ['OTEL_TRACES_EXPORTER'] = 'none'
os.environ['OTEL_METRICS_EXPORTER'] = 'none'
# Disable tokenizers parallelism warning
os.environ['TOKENIZERS_PARALLELISM'] = 'false'

# Add project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Suppress noisy logs
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('opentelemetry').setLevel(logging.ERROR)


async def test_memory_only():
    """Test memory service in isolation."""
    
    print("\nüß† MEMORY SERVICE TEST")
    print("=" * 50)
    
    # Import after env vars are set
    from memory_service.config import MemoryConfig
    from memory_service.service import MemoryService
    from memory_service.models import EvaluationRequest, SearchRequest
    
    # Initialize with local config
    print("\n1Ô∏è‚É£ Initializing Memory Service...")
    
    # Load config from YAML
    config = MemoryConfig.from_yaml('config/memory-local.yaml')
    service = MemoryService(config)
    
    try:
        await service.connect()
        print("‚úÖ Connected to all backends")
        
        # Test messages
        test_messages = [
            ("–ú–∞—Ä–∏–Ω–∞ –æ–±–æ–∂–∞–µ—Ç –∫–æ—Ñ–µ —Å –∫–æ—Ä–∏—Ü–µ–π –ø–æ —É—Ç—Ä–∞–º", "personal"),
            ("–ü–æ—á–∏–Ω–∏–ª–∏ pgvector —á–µ—Ä–µ–∑ register_vector –≤ init pool", "technical"), 
            ("–í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00", "temporal"),
            ("–ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å MVP —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", "plans"),
            ("–ù–µ—Ç, threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.65, –Ω–µ 0.3", "correction"),
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?", "casual"),
        ]
        
        print("\n2Ô∏è‚É£ Testing evaluation and storage...")
        saved_count = 0
        
        for message, category in test_messages:
            req = EvaluationRequest(
                message=message,
                source="test",
                context={"category": category}
            )
            
            resp = await service.evaluate_and_save(req)
            status = "‚úÖ SAVED" if resp.saved else "‚ùå SKIPPED"
            print(f"{status} [{resp.importance_score:.2f}] {category}: {message[:50]}...")
            
            if resp.saved:
                saved_count += 1
        
        print(f"\nüìä Saved {saved_count}/{len(test_messages)} messages")
        
        # Test search
        print("\n3Ô∏è‚É£ Testing vector search...")
        search_queries = [
            "–∫–æ—Ñ–µ –º–∞—Ä–∏–Ω–∞ —É—Ç—Ä–æ",
            "pgvector –ø–æ—á–∏–Ω–∫–∞", 
            "–≤—Å—Ç—Ä–µ—á–∞ –≤—Ä–µ–º—è",
            "–∑–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞"  # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        ]
        
        for query in search_queries:
            req = SearchRequest(query=query, k=3)
            results = await service.search(req)  # Returns list directly
            
            print(f"\nüîç Query: '{query}'")
            if results:
                for i, result in enumerate(results[:3]):
                    print(f"   {i+1}. [{result.similarity:.3f}] {result.memory.summary[:60]}...")
            else:
                print("   No results found")
        
        # Test duplicate
        print("\n4Ô∏è‚É£ Testing duplicate detection...")
        dup_req = EvaluationRequest(
            message="–ú–∞—Ä–∏–Ω–∞ –æ–±–æ–∂–∞–µ—Ç –∫–æ—Ñ–µ —Å –∫–æ—Ä–∏—Ü–µ–π –ø–æ —É—Ç—Ä–∞–º",
            source="test"
        )
        dup_resp = await service.evaluate_and_save(dup_req)
        
        if not dup_resp.saved and "Duplicate" in dup_resp.reason:
            print("‚úÖ Duplicate correctly detected!")
        else:
            print(f"‚ùì Unexpected result: {dup_resp.reason}")
        
        print("\n‚ú® All tests completed!")
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await service.disconnect()
        print("\nüëã Disconnected")


if __name__ == "__main__":
    asyncio.run(test_memory_only())
